package itangqi.me.mygreendao.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import itangqi.me.mygreendao.bean.Note;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table NOTE.
 */
public class NoteDao extends AbstractDao<Note, Long> {
    private static final String TAG="NoteDao";
    public static final String TABLENAME = "NOTE";
    private static final String id = "_id";
    private static final String note_id = "NOTE_ID";
    private static final String comment = "COMMENT";
    private static final String date = "DATE";
    private static final String name = "NAME";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, id);
        public final static Property Note_Id = new Property(1, String.class, "text", false, note_id);
        public final static Property Comment = new Property(2, String.class, "comment", false, comment);
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, date);
        public final static Property Name = new Property(4, String.class, "name", false, name);
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }

    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        String sql="CREATE TABLE " + constraint + TABLENAME+" (" +
                id+" INTEGER PRIMARY KEY ," +
                note_id+" TEXT NOT NULL ," +
                comment+" TEXT," +
                date+" INTEGER," +
                name+" TEXT" +
                ");";
        db.execSQL(sql); // 3: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'"+TABLENAME+"'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        String noteIdValue=entity.getNoteId();
        if(noteIdValue != null){
            stmt.bindString(2, noteIdValue);
        }
        String commentValue = entity.getComment();
        if (commentValue != null) {
            stmt.bindString(3, commentValue);
        }
        java.util.Date dateValue = entity.getDate();
        if (dateValue != null) {
            stmt.bindLong(4, dateValue.getTime());
        }
        String nameValue = entity.getName();
        if (nameValue != null) {
            stmt.bindString(5, nameValue);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note(
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0),
                cursor.getString(offset + 1),
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2),
                cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)),
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4)
                );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNoteId(cursor.getString(offset + 1));
        entity.setComment(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
